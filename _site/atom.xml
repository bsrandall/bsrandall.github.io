<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>No Excuses CCIE</title>
 <link href="http://bsrandall.github.io/atom.xml" rel="self"/>
 <link href="http://bsrandall.github.io/"/>
 <updated>2017-02-21T14:26:29-05:00</updated>
 <id>http://bsrandall.github.io</id>
 <author>
   <name>Brian Scott Randall</name>
   <email></email>
 </author>

 
 <entry>
   <title>Dot1q</title>
   <link href="http://bsrandall.github.io/vlan/2017/02/21/Dot1q/"/>
   <updated>2017-02-21T00:00:00-05:00</updated>
   <id>http://bsrandall.github.io/vlan/2017/02/21/Dot1q</id>
   <content type="html">&lt;h4 id=&quot;trunks&quot;&gt;Trunks&lt;/h4&gt;
&lt;p&gt;Dot1q is the standard trunking protocol used for transporting multiple VLANs across a trunk port. A trunk is a point-to-point link that carries the traffic for multiple VLANs across a single trunk. Dot1q is a standard that tags VLANs for identification. The receiving switch will then strip the VLAN tag from the frame before passing it to the appropriate access port.&lt;/p&gt;

&lt;p&gt;The full name for Dot1q is IEEE 802.1Q.&lt;/p&gt;

&lt;p&gt;The 802.1Q Tagged frame looks like this:
&lt;img src=&quot;http://bsrandall.github.io/public/img/802.1q.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The PRI field is the 3-bit 802.1p priority field.&lt;/li&gt;
  &lt;li&gt;The CFI field is always set to 0 for Ethernet switches&lt;/li&gt;
  &lt;li&gt;VLAN ID is a 12-bit field&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because of the extra fields, an 802.1Q frame has an MTU of 1522 bytes.&lt;/p&gt;

&lt;p&gt;If a non-802.1Q enabled device or an access port receives a tagged frame, it simply ignores the frame and forwards it as usual.&lt;/p&gt;

&lt;h4 id=&quot;native-vlan&quot;&gt;Native VLAN&lt;/h4&gt;
&lt;p&gt;A Native VLAN on a trunk is the VLAN to which untagged traffic belongs. Across a trunk, the Native VLANs should match on each end.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SW1# show interface trunk
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;will show the Native VLAN for each interface that has active trunking.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Dynamic Trunking Protocol (DTP)</title>
   <link href="http://bsrandall.github.io/vlan/2017/02/21/DTP/"/>
   <updated>2017-02-21T00:00:00-05:00</updated>
   <id>http://bsrandall.github.io/vlan/2017/02/21/DTP</id>
   <content type="html">&lt;p&gt;Dynamic Trunking Protocol is a Cisco proprietary protocol that, when configured, attempts to negotiate trunking between two connected ports. It will try to negotiate trunking as well as the encapsulation type.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SW1# switchport mode dynamic auto - allows the interfaces to become a trunk if the neighboring trunk is set to trunk or desirable mode - this is the default setting for newer Cisco switches - if both ends of a trunk are set to dynamic auto, they will not form a trunk
SW1# switchport mode dynamic desireable - makes the interface actively attempt to negotiate trunking - the link will become a trunk if the neighbor interface is set to trunk, auto, or desirable
SW1# switchport nonegotiate - prevents the interface from sending DTP frames - can use this when the interface switch port mode is *access* or *trunk* only - if enabled, to establish a trunk the neighbor interface must be manually set to *trunk*
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>VLANs</title>
   <link href="http://bsrandall.github.io/vlan/2017/02/21/Allowed-VLANs/"/>
   <updated>2017-02-21T00:00:00-05:00</updated>
   <id>http://bsrandall.github.io/vlan/2017/02/21/Allowed-VLANs</id>
   <content type="html">&lt;p&gt;By default, all VLANs are allowed to traverse an 802.1Q trunk once it is active. To restrict which VLANs are allowed to cross a trunk, you must go into IOS and explicitly define the VLANs that are allowed.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SW1# switchport trunk allow VLAN 15-20,22,25

SW1# switchport trunk allowed vlan add 27

SW1# switchport trunk allowed vlan remove 18
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You must remember that if an allowed VLAN list is already configured on a trunk, issuing the &lt;code class=&quot;highlighter-rouge&quot;&gt;SW1# switchport trunk allowed vlan 16-20,2,25&lt;/code&gt; command will overwrite the previously defined VLANs. You must use the &lt;em&gt;add&lt;/em&gt; and &lt;em&gt;remove&lt;/em&gt; commands if there is already an allowed clan configuration in the running config.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Access Ports</title>
   <link href="http://bsrandall.github.io/vlan/2017/02/21/Access-Ports/"/>
   <updated>2017-02-21T00:00:00-05:00</updated>
   <id>http://bsrandall.github.io/vlan/2017/02/21/Access-Ports</id>
   <content type="html">&lt;p&gt;Access ports are those ports that are connected to end devices, not other switches. We define an access port on the command line with 
	SW1# switchport mode access&lt;/p&gt;

&lt;p&gt;We will see later with Spanning Tree, that PortFast can and should be used on access ports. This does two things. First, it allows the port to skip the listening phase for faster availability. Second, it prevents the access port from sending TCNs (Topology Change Notifications) every time a user plugs or unplugs a device into the port.&lt;/p&gt;

&lt;p&gt;Another Spanning Tree feature which will relate to Access ports is BPDU Guard. With BPDU Guard, if the switch receives a BPDU on a port where BPDU Guard was enabled, the port will transition to the errdisabled state.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>VLANs</title>
   <link href="http://bsrandall.github.io/vlan/2017/02/20/VLANs/"/>
   <updated>2017-02-20T00:00:00-05:00</updated>
   <id>http://bsrandall.github.io/vlan/2017/02/20/VLANs</id>
   <content type="html">&lt;h4 id=&quot;standard-vlans&quot;&gt;Standard VLANs&lt;/h4&gt;
&lt;p&gt;Cisco calls VLANS 1 - 1005 Normal VLANs. Of those, VLAN 1 is the Cisco default. You can use this VLAN, but your are not allowed to delete it. VLANs 1002 - 1005 are the Cisco defaults for FDDI and Token Ring. These also cannot be deleted.&lt;/p&gt;

&lt;p&gt;That leaves us VLANs 2 - 1001 as Normal VLANs that we can add or delete as we wish.&lt;/p&gt;

&lt;p&gt;VLANs 2 - 1001 are pruning eligible, while VLANs 1006 - 4094 are not.&lt;/p&gt;

&lt;p&gt;When you delete a VLAN, any LAN ports configured as access ports for that VLAN become inactive until you assign them to a new VLAN.&lt;/p&gt;

&lt;h4 id=&quot;extended-vlans&quot;&gt;Extended VLANs&lt;/h4&gt;
&lt;p&gt;Extended VLANs are in the range of 1006 - 4094. Extended range VLANs are not controlled by VTP and cannot be pruned. The router must be in VTP transparent mode in order to create extended VLANs.&lt;/p&gt;

&lt;p&gt;Extended range VLANs are not stored in van.dat&lt;/p&gt;

&lt;h4 id=&quot;vlan-database&quot;&gt;VLAN Database&lt;/h4&gt;
&lt;p&gt;Only applies to standard VLANs.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hello World</title>
   <link href="http://bsrandall.github.io/general/2017/02/20/Hello-World/"/>
   <updated>2017-02-20T00:00:00-05:00</updated>
   <id>http://bsrandall.github.io/general/2017/02/20/Hello-World</id>
   <content type="html">&lt;p&gt;This is my first post in my newly launched blog. I decided to go with Jekyll and a GitHub page for my blog backend. I wanted my content to be in Markdown, as that seems to be the authoring flavor of the day. Jekyll and GitHub just made sense due to their support of Markdown.&lt;/p&gt;

&lt;p&gt;Our knowledge is at its pinnacle when we can fluidly explain topics to others. That is my main motivation for this blog. There most likely will not be any ground breaking content, but I hope to explain some of the topics in a way that makes sense.&lt;/p&gt;

&lt;p&gt;The other two benefits to my blog is hopefully improving on my Markdown and typing skills. It is sad that I still type as badly as I do, considering how much I type. I will use Markdown highlighting for code samples. TextExpander should make all of this a little easier.&lt;/p&gt;

&lt;p&gt;This is some sample IOS commands using Markdown:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SW1# switchport trunk encapsulation dot1q
SW1# switchport mode trunk
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Well I am off to the races. Or as most of those who have gone before me stress, off to start the marathon!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Git</title>
   <link href="http://bsrandall.github.io/general/2017/02/20/Git/"/>
   <updated>2017-02-20T00:00:00-05:00</updated>
   <id>http://bsrandall.github.io/general/2017/02/20/Git</id>
   <content type="html">&lt;p&gt;I am not a git master, nor do I strive to become one. But I do need to know some basic details to manage this blog as well as my INE VIRL configurations. There are probably better ways to do this, but for my purposes, these are the commands I am running to push my updates from my MacBook to by GitHub page:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/Dropbox/jekyll.bsrandall.github.io(master) &amp;gt;&amp;gt; git add --all
~/Dropbox/jekyll.bsrandall.github.io(master) &amp;gt;&amp;gt; git commit -m &quot;update notes&quot;
~/Dropbox/jekyll.bsrandall.github.io(master) &amp;gt;&amp;gt; git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
 </entry>
 

</feed>
